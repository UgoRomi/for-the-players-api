openapi: 3.0.0
info:
  title: 4TP API
  description: 4TP API
  version: 0.0.1
servers:
  - url: "https://for-the-players.herokuapp.com/"
tags:
  - name: auth
    description: Endpoints about user auth
  - name: platform
    description: Endpoints about platforms
  - name: game
    description: Endpoints about games
  - name: user
    description: Endpoints about user and user profile
  - name: tournaments
    description: Endpoints about tournaments and ladders
  - name: rulesets
    description: Endpoints about rulesets for tournaments
  - name: invites
    description: Team invites
  - name: matches
    description: Tournament matches
paths:
  /auth/signup:
    post:
      summary: registration endpoint
      tags:
        - auth
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The new user's email
                  type: string
                  format: email
                password:
                  description: The new user's password
                  type: string
                username:
                  description: The new user's password
                  type: string
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "201":
          description: "User successfully registered"
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: "The username of the new User"
                  email:
                    type: string
                    description: "The email of the new user"
                    format: email
                  status:
                    $ref: "#/components/schemas/UserStatuses"
                  token:
                    type: string
                    description: "The JWT of the newly created user. Only valid for the /auth/email endpoint"
  /auth/login:
    post:
      summary: login endpoint
      tags:
        - auth
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The new user's email
                  type: string
                  format: email
                password:
                  description: The new user's password
                  type: string
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "200":
          description: "User successfully logged in"
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: "The JWT for the logged in user"
                  status:
                    $ref: "#/components/schemas/UserStatuses"
  /auth/email:
    get:
      summary: Send a verification email for the logged in user
      security:
        - BearerAuth: []
      tags:
        - auth
      operationId: sendVerificationEmail
      responses:
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "Email sent"
  /auth/password:
    post:
      summary: Sends to the user an email with a link to rest their password
      tags:
        - auth
      operationId: sendForgottenPasswordEmail
      requestBody:
        content:
          application/json:
            schema:
              required:
                - email
              type: object
              properties:
                email:
                  description: The user's email
                  type: string
                  format: email
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "200":
          description: "Email sent"
    patch:
      summary: Resets the user's password
      security:
        - BearerAuth: []
      tags:
        - auth
      operationId: resetUserPassword
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - newPassword
              properties:
                newPassword:
                  type: string
                  description: The user's new password
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        200:
          description: "success"
  /platforms:
    post:
      summary: Create a new platform
      security:
        - BearerAuth: []
      tags:
        - platform
      operationId: createPlatform
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new platform's name
                  type: string
                show:
                  description: If the platform should be showed to the end user
                  type: boolean
                imgUrl:
                  description: >
                    The imgurl link of the new platform's image.
                    If this is present `imgBase64` will be ignored
                  type: string
                imgBase64:
                  description: >
                    The base64 of the new platform's image.
                    If `imgUrl` is present this will be ignored
                  type: string
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "201":
          description: "Platform successfully added"
    get:
      summary: Returns the list of all platforms that can be seen by the end user (The one that have visible=true)
      security:
        - BearerAuth: []
      tags:
        - platform
      operationId: listAllVisiblePlatforms
      responses:
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "List of platforms"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The platform's id
                    name:
                      type: string
                      description: The platform's name
                    imageUrl:
                      type: string
                      description: The URL of the image that represents this platform
                    games:
                      type: array
                      items:
                        type: object
                        properties:
                          _id:
                            type: string
                            description: The game's ID
                          name:
                            type: string
                            description: The game's name
  /platforms/{platformId}:
    parameters:
      - name: platformId
        in: path
        required: true
        description: The MongoDB ID of the platform
        schema:
          $ref: "#/components/schemas/MongoID"
    get:
      tags:
        - platform
      security:
        - BearerAuth: []
      summary: Returns the platforms that corresponds to the platform ID
      responses:
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Platform not found"
        "200":
          description: "The platform"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    description: The platform's name
                    type: string
                  show:
                    description: If the platform should be showed to the end user
                    type: boolean
                  imageUrl:
                    type: string
                    description: The URL of the image that represents this platform
                  games:
                    type: array
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          maxLength: 24
                          minLength: 24
                          description: The mongo ID of the game
                        name:
                          type: string
                          description: The name's game
                        show:
                          type: boolean
                          description: If the user should see this game for the platform
  /games:
    get:
      summary: Returns the list of all games
      security:
        - BearerAuth: []
      tags:
        - game
      operationId: listAllGames
      responses:
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "List of games"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    _id:
                      type: string
                      description: The Mongo ID of the game
                    name:
                      type: string
                      description: "The name of the game"
                    imgUrl:
                      type: string
                      description: The image for the game
    post:
      summary: Create a new game
      security:
        - BearerAuth: []
      tags:
        - game
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
              type: object
              properties:
                name:
                  description: The new game's name
                  type: string
                imgUrl:
                  description: >
                    The imgurl link of the new game's image.
                    If this is present `imgBase64` will be ignored
                  type: string
                imgBase64:
                  description: >
                    The base64 of the new game's image.
                    If `imgUrl` is present this will be ignored
                  type: string
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "201":
          description: "Game successfully added"
  /users:
    parameters:
      - in: query
        name: username
        schema:
          type: string
        description: The user's username. Will match partial usernames
      - in: query
        name: email
        schema:
          type: string
          format: email
        description: The user's email. Will match partial emails
    get:
      tags:
        - user
      security:
        - BearerAuth: []
      summary: Returns a list of users
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "User not found"
        "200":
          description: "List of users matching the search"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
                      description: The user's username
                    email:
                      type: string
                      description: The user's email
                    _id:
                      type: string
                      description: The user's ID
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The ID of the user
        schema:
          $ref: "#/components/schemas/MongoID"
    get:
      tags:
        - user
      security:
        - BearerToken: []
      summary: Returns a single user's details
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "The User"
          content:
            application/json:
              schema:
                type: object
                properties:
                  elo:
                    type: integer
                    description: The player's ELO
                  email:
                    type: string
                    format: email
                    description: "The user's email"
                  username:
                    type: string
                    description: "The user's username"
                  createdAt:
                    type: string
                    format: date
                  platforms:
                    type: array
                    description: "The platforms to which the user has registered"
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: "The platform's name"
                        username:
                          type: string
                          description: "The user's username for this platform"
                  tournaments:
                    type: array
                    description: "The tournament of which the user is a part of"
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: The tournament's name
                        game:
                          type: string
                          description: The name of the tournament's game
                        finished:
                          type: boolean
                          description: If the tournament is over
                        platform:
                          type: string
                          description: The name of the tournament's platform
                        type:
                          $ref: "#/components/schemas/TournamentTypes"
                        team:
                          type: object
                          description: The user's team in that tournament
                          properties:
                            name:
                              type: string
                              description: The team's name
                  invites:
                    type: array
                    description: List of invites the user has received
                    items:
                      type: object
                      properties:
                        tournamentId:
                          type: string
                          description: The ID of the tournament this invite refres to
                        teamName:
                          type: string
                          description: The name of the team the user got invited to
                        status:
                          $ref: "#/components/schemas/TeamInvites"
    patch:
      summary: Updats the user profile
      security:
        - BearerAuth: []
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              required:
                - oldPassword
                - newPassword
              type: object
              properties:
                oldPassword:
                  description: Old password
                  type: string
                newPassword:
                  description: New password
                  type: string
                username:
                  description: New username
                  type: string
                platforms:
                  description: List of platforms and the logged user's usernames
                  type: array
                  items:
                    type: object
                    properties:
                      username:
                        type: string
                        description: The user's username
                      _id:
                        $ref: "#/components/schemas/MongoID"
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "User not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "User updated"
  /tournaments:
    post:
      summary: Create a new tournament
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: createTournament
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - game
                - platform
                - startsOn
                - endsOn
                - rulesets
                - type
                - show
              properties:
                name:
                  description: The new tournament's name
                  type: string
                game:
                  description: The Mongo ID of the game on which the tournament will be played on
                  type: string
                  minLength: 24
                  maxLength: 24
                platform:
                  description: The Mongo ID of the platform on which the tournament will be played on
                  type: string
                  minLength: 24
                  maxLength: 24
                show:
                  description: If the tournament should appear in the list of upcoming tournaments in the app
                  type: boolean
                open:
                  description: If teams can join the tournament, defaults to true
                  type: boolean
                startsOn:
                  description: The date and time on which the tournament will start
                  type: string
                  format: date-time
                endsOn:
                  description: The date and time on which the tournament will end
                  type: string
                  format: date-time
                rulesets:
                  type: array
                  items:
                    type: string
                    description: The mongo ID of the ruleset
                type:
                  $ref: "#/components/schemas/TournamentTypes"
                imgUrl:
                  description: >
                    The imgurl link of the new tournament's image.
                    If this is present `imgBase64` will be ignored
                  type: string
                imgBase64:
                  description: >
                    The base64 of the new tournament's image.
                    If `imgUrl` is present this will be ignored
                  type: string
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "201":
          description: "Tournament added"
    get:
      summary: List all visible tournaments
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: listVisibleTournaments
      parameters:
        - in: query
          name: gameId
          schema:
            $ref: "#/components/schemas/MongoID"
          description: Only show tournaments for a given game
        - in: query
          name: type
          schema:
            $ref: "#/components/schemas/TournamentTypes"
          description: Only show a type of tournament
      responses:
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "List of all visible tournaments"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: "The name of the tournament"
                    _id:
                      type: string
                      description: The Mongo ID of the tournament
                    startsOn:
                      type: string
                      format: date-time
                      description: The time on which the tournament starts
                    endsOn:
                      type: string
                      format: date-time
                      description: The time on which the tournament ends
                    rulesets:
                      type: array
                      items:
                        type: string
                        description: The mongo ID of the ruleset
                    type:
                      $ref: "#/components/schemas/TournamentTypes"
                    numberOfTeams:
                      type: integer
                      description: How many teams are already signed up to this tournament
                    imgUrl:
                      type: string
                      description: The URL of the tournament's image
                    game:
                      type: string
                      description: The name of the game this tournament is on
                    open:
                      type: boolean
                      description: If new teams can join the tournament
  /tournaments/{tournamentId}:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The MongoDB ID of the tournament
        schema:
          $ref: "#/components/schemas/MongoID"
    get:
      summary: Get a tournament details
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: getTeam
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Something was not found, check errorMessage for further info"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: "The name of the tournament"
                  _id:
                    type: string
                    description: The Mongo ID of the tournament
                  startsOn:
                    type: string
                    format: date-time
                    description: The time on which the tournament starts
                  endsOn:
                    type: string
                    format: date-time
                    description: The time on which the tournament ends
                  rulesets:
                    type: array
                    description: The list of rulesets used in this tournament
                    items:
                      type: object
                      properties:
                        _id:
                          $ref: "#/components/schemas/MongoID"
                        maps:
                          type: array
                          items:
                            type: string
                        maxNumberOfPlayersPerTeam:
                          type: integer
                        minNumberOfPlayersPerTeam:
                          type: integer
                        description:
                          type: string
                        name:
                          type: string
                        bestOf:
                          type: integer
                  type:
                    $ref: "#/components/schemas/TournamentTypes"
                  teams:
                    type: array
                    description: The teams signed up to this tournament
                    items:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The ID of the team
                        name:
                          type: string
                          description: The team's name
                        elo:
                          type: integer
                          description: The team's ELO
                        points:
                          type: integer
                          description: The team's ELO
                        members:
                          type: array
                          description: The members of the team
                          items:
                            type: object
                            properties:
                              role:
                                $ref: "#/components/schemas/TeamRoles"
                              userId:
                                type: string
                                minLength: 24
                                maxLength: 24
                                description: The Mongo ID of the user that's a part of this team
                        teamStatus:
                          $ref: "#/components/schemas/TeamStatuses"
                        wins:
                          type: integer
                          description: The total wins for this team in this tournament
                        losses:
                          type: integer
                          description: The total losses for this team in this tournament
                        ties:
                          type: integer
                          description: The total ties for this team in this tournament
                  userTeam:
                    description: The team of the user, if present
                    type: object
                    properties:
                      name:
                        type: string
                        description: The team's name
                      elo:
                        type: integer
                        description: The team's ELO
                      members:
                        type: array
                        description: The members of the team
                        items:
                          type: object
                          properties:
                            role:
                              $ref: "#/components/schemas/TeamRoles"
                            userId:
                              type: string
                              minLength: 24
                              maxLength: 24
                              description: The Mongo ID of the user that's a part of this team
                  imgUrl:
                    type: string
                    description: The URL of the tournament's image
                  game:
                    type: string
                    description: The name of the game this tournament is on
                  matches:
                    type: object
                    properties:
                      _id:
                        type: string
                        description: The ID of the match
                      teamOne:
                        type: object
                        description: The team that created the match
                        properties:
                          _id:
                            $ref: "#/components/schemas/MongoID"
                          name:
                            type: string
                          result:
                            $ref: "#/components/schemas/TeamSubmittedMatchResults"
                      teamTwo:
                        type: object
                        description: If present is the team that accepted the match
                        properties:
                          _id:
                            $ref: "#/components/schemas/MongoID"
                          name:
                            type: string
                          result:
                            $ref: "#/components/schemas/TeamSubmittedMatchResults"
                      status:
                        $ref: "#/components/schemas/MatchStatuses"
                      createdAt:
                        type: string
                        format: date-time
                        description: "When the match was first created"
                      acceptedAt:
                        type: string
                        format: date-time
                        description: "When the match was accepted"
                  open:
                    type: boolean
                    description: If new teams can join the tournament
  /tournaments/{tournamentId}/teams:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The MongoDB ID of the tournament
        schema:
          $ref: "#/components/schemas/MongoID"
    post:
      summary: Create a new team in the tournament
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: createTeam
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
              properties:
                name:
                  description: The new team's name
                  type: string
                imgUrl:
                  description: >
                    The imgurl link of the new team's image.
                    If this is present `imgBase64` will be ignored
                  type: string
                imgBase64:
                  description: >
                    The base64 of the new team's image.
                    If `imgUrl` is present this will be ignored
                  type: string
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "201":
          description: "Team created"
  /tournaments/{tournamentId}/teams/{teamId}:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The ID of the tournament
        schema:
          $ref: "#/components/schemas/MongoID"
      - name: teamId
        in: path
        required: true
        description: The ID of the team
        schema:
          $ref: "#/components/schemas/MongoID"
    patch:
      summary: Update the team details
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: updateTeam
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: The team's new name
                membersToRemove:
                  type: array
                  items:
                    type: string
                    description: user ID
                    minLength: 24
                    maxLength: 24
                imgUrl:
                  description: >
                    The imgurl link of the new team's image.
                    If this is present `imgBase64` will be ignored
                  type: string
                imgBase64:
                  description: >
                    The base64 of the new team's image.
                    If `imgUrl` is present this will be ignored
                  type: string
                newLeader:
                  description: The ID of the new Leader
                  type: string
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Resource not found"
        "200":
          description: "Team updated"
    delete:
      summary: Deletes the team
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: deleteTeam
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Resource not found"
        "200":
          description: "Team deleted"
    get:
      summary: Get a team's details
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: teamDetails
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Resource not found"
        "200":
          description: "Team detail"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    description: The team's name
                  members:
                    type: array
                    description: The list of members in the team
                    items:
                      type: object
                      properties:
                        role:
                          $ref: "#/components/schemas/TeamRoles"
                        _id:
                          $ref: "#/components/schemas/MongoID"
                        username:
                          type: string
                  invites:
                    type: array
                    description: A list of pending invites to this team
                    items:
                      type: object
                      properties:
                        userId:
                          type: string
                          minLength: 24
                          maxLength: 24
                        username:
                          type: string
                  wins:
                    type: integer
                    description: The total wins for this team in this tournament
                  losses:
                    type: integer
                    description: The total losses for this team in this tournament
                  ties:
                    type: integer
                    description: The total ties for this team in this tournament
                  imgUrl:
                    description: >
                      The imgurl link of the new team's image.
                      If this is present `imgBase64` will be ignored
                    type: string
  /tournaments/{tournamentId}/teams/{teamId}/user/{userId}:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The ID of the tournament
        schema:
          $ref: "#/components/schemas/MongoID"
      - name: teamId
        in: path
        required: true
        description: The ID of the team
        schema:
          $ref: "#/components/schemas/MongoID"
      - name: userId
        in: path
        required: true
        description: The ID of the user that wants to quit the team
        schema:
          $ref: "#/components/schemas/MongoID"
    delete:
      security:
        - BearerAuth: []
      description: >
        Remove the user from the team's members.
        Only the user of the team can remove himself
      tags:
        - teams
      operationId: deleteUserInTeam
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Tournament or match not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "User removed"
  /tournaments/{tournamentId}/teams/{teamId}/invites:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The ID of the tournament
        schema:
          $ref: "#/components/schemas/MongoID"
      - name: teamId
        in: path
        required: true
        description: The ID of the team
        schema:
          $ref: "#/components/schemas/MongoID"
    post:
      summary: Invites a player to a team
      security:
        - BearerAuth: []
      tags:
        - tournaments
      operationId: inviteToTeam
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
              properties:
                userId:
                  description: The ID of the user to invite
                  minLength: 24
                  maxLength: 24
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Resource not found"
        "422":
          description: "The user tried to invite himself"
        201:
          description: "success"
  /tournaments/{tournamentId}/matches:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The ID of the tournament
        schema:
          $ref: "#/components/schemas/MongoID"
    post:
      security:
        - BearerAuth: []
      description: >
        Create a new match. The match has to be accepted by another team before it's valid <br>
        If there already is a match with an open spot for this tournament the team will automatically join that match
      tags:
        - matches
      operationId: createMatch
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                teamId:
                  $ref: "#/components/schemas/MongoID"
                rulesetId:
                  type: string
                  description: The mongo ID for the ruleset
                numberOfPlayers:
                  type: integer
                  description: The number of players that are going to play
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Tournament or team not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "The team joined a match"
          content:
            application/json:
              schema:
                type: object
                properties:
                  matchId:
                    $ref: "#/components/schemas/MongoID"
        "201":
          description: "Match created"
    get:
      security:
        - BearerAuth: []
      description: "Get the list of matches for the given tournament"
      tags:
        - matches
      operationId: getListOfMatches
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Tournament not found"
        "200":
          description: "List of matches"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    rulesetId:
                      type: string
                      description: The mongo ID for the ruleset
                    numberOfPlayers:
                      type: integer
                      description: The number of players that is gonna play
                    teamOne:
                      type: object
                      description: The team that created the match
                      properties:
                        _id:
                          $ref: "#/components/schemas/MongoID"
                        name:
                          type: string
                        result:
                          $ref: "#/components/schemas/TeamSubmittedMatchResults"
                    teamTwo:
                      type: object
                      description: If present is the team that accepted the match
                      properties:
                        _id:
                          $ref: "#/components/schemas/MongoID"
                        name:
                          type: string
                        result:
                          $ref: "#/components/schemas/TeamSubmittedMatchResults"
                    state:
                      $ref: "#/components/schemas/MatchStatuses"
                    createdAt:
                      type: string
                      format: date-time
                      description: "When the match was first created"
  /tournaments/{tournamentId}/matches/{matchId}:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The ID of the tournament
        schema:
          $ref: "#/components/schemas/MongoID"
      - name: matchId
        in: path
        required: true
        description: The ID of the match
        schema:
          $ref: "#/components/schemas/MongoID"
    get:
      security:
        - BearerAuth: []
      description: Get the details of a match
      tags:
        - matches
      operationId: getMatchDetils
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Tournament or match not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "Match details"
          content:
            application/json:
              schema:
                type: object
                properties:
                  rulesetId:
                    type: string
                    description: The mongo ID for the ruleset
                  numberOfPlayers:
                    type: integer
                    description: The number of players that is gonna play
                  teamOne:
                    type: object
                    description: The team that created the match
                    properties:
                      _id:
                        $ref: "#/components/schemas/MongoID"
                      name:
                        type: string
                      result:
                        $ref: "#/components/schemas/TeamSubmittedMatchResults"
                  teamTwo:
                    type: object
                    description: If present is the team that accepted the match
                    properties:
                      _id:
                        $ref: "#/components/schemas/MongoID"
                      name:
                        type: string
                      result:
                        $ref: "#/components/schemas/TeamSubmittedMatchResults"
                  state:
                    $ref: "#/components/schemas/MatchStatuses"
                  createdAt:
                    type: string
                    format: date-time
                    description: "When the match was first created"
                  acceptedAt:
                    type: string
                    format: date-time
                    description: "When the match was accepted"
                  maps:
                    type: array
                    description: The maps that will be played in this match
                    items:
                      type: string
    delete:
      security:
        - BearerAuth: []
      description: >
        Deletes the match.
        Only the leader of the team that created the match can do this
        No results must have been posted for this to succeed
      tags:
        - matches
      operationId: deleteMatch
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Tournament or match not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "Match deleted"
    patch:
      security:
        - BearerAuth: []
      description: Used when a team accepts or quits the match or to post results
      tags:
        - matches
      operationId: updateMatch
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                teamId:
                  $ref: "#/components/schemas/MongoID"
                action:
                  $ref: "#/components/schemas/UpdateMatchActions"
                result:
                  $ref: "#/components/schemas/TeamSubmittedMatchResults"
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Tournament or match not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "Match updated"
  /invites/{inviteId}:
    parameters:
      - name: inviteId
        in: path
        required: true
        description: The ID of the invite
        schema:
          $ref: "#/components/schemas/MongoID"
    patch:
      security:
        - BearerAuth: []
      description: Updates the status of an invite
      tags:
        - invites
      operationId: updateInvite
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newStatus:
                  $ref: "#/components/schemas/TeamInvites"
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Invite not found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "Invite status updated"
    delete:
      security:
        - BearerAuth: []
      description: >
        Deletes an invite
        Invite must be in status: PENDING
      tags:
        - invites
      operationId: deleteInvite
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "404":
          description: "Invite not found"
        "200":
          description: "Invite deleted"
  /rulesets:
    get:
      summary: Returns all rulesets
      security:
        - BearerAuth: []
      tags:
        - rulesets
      operationId: listRulesets
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "The list of all rulesets"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: "The name of the ruleset"
                    _id:
                      type: string
                      description: The Mongo ID of the ruleset
                    game:
                      type: object
                      properties:
                        _id:
                          type: string
                          description: The Mongo ID of the game the ruleset is for
                        name:
                          type: string
                          description: The name of the game the ruleset is for
                    description:
                      type: string
                      description: The description of the ruleset
                    maps:
                      type: array
                      description: The maps that can be played in this tournament
                      items:
                        type: string
                    bestOf:
                      description: If the value is "3" indicates that when this ruleset is used matches are played in a best of 3
                      type: integer
                    maxNumberOfPlayersPerTeam:
                      type: integer
                      description: The maximum number of players that can be in a team when using this ruleset
                    minNumberOfPlayersPerTeam:
                      type: integer
                      description: The minimum number of players that can be in a team when using this ruleset
    post:
      summary: Create a new ruleset for a game
      security:
        - BearerAuth: []
      tags:
        - rulesets
      operationId: createRuleset
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - game
                - maxNumberOfPlayersPerTeam
                - minNumberOfPlayersPerTeam
                - description
                - name
                - maps
              properties:
                name:
                  description: The ruleset's name, must be unique
                  type: string
                maxNumberOfPlayersPerTeam:
                  description: The maximum number of players a team can have
                  type: integer
                minNumberOfPlayersPerTeam:
                  description: The minimum number of players a team can have
                  type: integer
                description:
                  description: The ruleset's description
                  type: string
                game:
                  description: Mongo ID of the game
                  type: string
                  minLength: 24
                  maxLength: 24
                maps:
                  type: array
                  description: The maps that can be played in tournaments using this ruleset
                  items:
                    type: string
                bestOf:
                  description: If the value is "3" indicates that when this ruleset is used matches are played in a best of 3
                  type: integer
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "201":
          description: "Ruleset added"

  /tickets:
    get:
      summary: Returns all tickets
      security:
        - BearerAuth: []
      tags:
        - tickets
      operationId: listTickets
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "The list of all tickets"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    subject:
                      type: string
                      description: The subject of the ticket
                    _id:
                      type: string
                      description: The Mongo ID of the ticket
                    date:
                      type: string
                      format: date-time
                      description: The date of the ticket
                    category:
                      $ref: "#/components/schemas/TicketCategories"
                    matchId:
                      type: string
                      description: The Mongo ID of the linked match (optional)
                    status:
                      $ref: "#/components/schemas/TicketStatuses"
                    tournamentId:
                      type: string
                      description: The Mongo ID of the linked tournament (optional)
                    attachments:
                      type: array
                      items:
                        type: string
                        description: The url of the attachment
                    messages:
                      type: object
                      properties:
                        authorId: 
                          type: string
                          description: The url of the attachment
                        message: 
                          type: string
                          description: The message
                        date: 
                          type: string
                          format: date-time
                          description: The date of the message
                        isAdmin: 
                          type: boolean
                          description: If the message has been sent by an admin
                        _id:
                          type: string
                          description: The Id of the message
    post:
      summary: Create a new ticket
      security:
        - BearerAuth: []
      tags:
        - tickets
      operationId: createTicket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - subject
                - description
                - category
                - date
              properties:
                subject:
                  description: The ticket's subject
                  type: string
                description:
                  description: The ticket's description (this is going to be the first message)
                  type: string
                category:
                  $ref: "#/components/schemas/TicketCategories"
                matchId:
                  type: string
                  description: The linked match's ID 
                tournamentId:
                  type: string
                  description: The linked tournament's ID 
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "201":
          description: "Ticket added"
  /tickets/{ticketId}:
    parameters:
      - name: ticketId
        in: path
        required: true
        description: The ID of the ticket
        schema:
          $ref: "#/components/schemas/MongoID"
    get:
      summary: Returns a single ticket
      security:
        - BearerAuth: []
      tags:
        - tickets
      operationId: getTicketDetail
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "200":
          description: "A single ticket"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    subject:
                      type: string
                      description: The subject of the ticket
                    _id:
                      $ref: "#/components/schemas/MongoID"
                    createdAt:
                      type: string
                      format: date-time
                      description: When the ticket was created
                    messages:
                      type: array
                      items:
                        type: object
                        properties:
                          user:
                            type: object
                            properties:
                              username:
                                type: string
                              _id:
                                $ref: "#/components/schemas/MongoID"
                          message:
                            type: string
                          createdAt:
                            type: string
                            format: date-time
                          fromAdminPanel:
                            type: boolean
                            description: Indicates if this message has been sent from the admin panel or from the app
                    category:
                      $ref: "#/components/schemas/TicketCategories"
                    tournament:
                      type: object
                      description: Only present when the category is DISPUTE
                      properties:
                        _id:
                          $ref: "#/components/schemas/MongoID"
                        name:
                          type: string
                          description: The name of the linked tournament
                    match:
                      type: object
                      description: Only present when the category is DISPUTE
                      properties:
                        _id:
                          $ref: "#/components/schemas/MongoID"
                        acceptedDate:
                          type: string
                          format: date-time
                        teamOne:
                          type: object
                          properties:
                            name:
                              type: string
                            _id:
                              $ref: "#/components/schemas/MongoID"
                        teamTwo:
                          type: object
                          properties:
                            name:
                              type: string
                            _id:
                              $ref: "#/components/schemas/MongoID"
                    attachments:
                      type: array
                      items:
                        type: string
                        description: The url of the attachment
                    status:
                      $ref: "#/components/schemas/TicketStatuses"
    patch:
      summary: Update the ticket status
      security:
        - BearerAuth: []
      tags:
        - tickets
      operationId: updateTicket
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - newStatus
              properties:
                newStatus:
                  $ref:  "#/components/schemas/TicketStatuses"
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        200:
          description: "success"
  /tickets/{ticketId}/messages:
    parameters:
      - name: ticketId
        in: path
        required: true
        description: The ID of the ticket
        schema:
          $ref: "#/components/schemas/MongoID"
    post:
      summary: Add message to ticket
      security:
        - BearerAuth: [ ]
      tags:
        - tickets
      operationId: updateTicketMessage
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - message
                - fromAdminPanel
              properties:
                message:
                  type: string
                  description: The message body
                fromAdminPanel:
                  type: boolean
                  description: Indicates if the message is sent from the admin panel
      responses:
        "400":
          description: "The input data was wrongly formatted"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaValidationError"
        "401":
          description: "Missing bearer token"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "403":
          description: "Forbidden"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorMessageResponse"
        "201":
          description: "Ticket's message added"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    SchemaValidationError:
      type: array
      items:
        type: object
        properties:
          value:
            type: string
            description: "The value that was received by the server"
          msg:
            type: string
            description: "Error message"
          param:
            type: string
            description: "Name of the field that caused the error"
          location:
            type: string
            description: "Where the field was that was received by the server"
    ErrorMessageResponse:
      type: object
      properties:
        errorMessage:
          type: string
    UserStatuses:
      description: "The possible statuses for a user"
      type: string
      enum:
        - NOT_VERIFIED
        - VERIFIED
        - BANNED
    TicketStatuses:
      description: "The possible statuses for a ticket"
      type: string
      enum:
        - NEW
        - IN PROGRESS
        - SOLVED
        - DELETED
    TicketCategories:
      description: "The possible categories of a ticket"
      type: string
      enum:
        - DISPUTE
        - GENERAL_INQUIRY
        - PAYMENT
    MatchStatuses:
      description: "The possible statuses of a match"
      type: string
      enum:
        - PENDING
        - TIE
        - TEAM1
        - TEAM2
        - DISPUTE
    TeamSubmittedMatchResults:
      description: "The list of possible results a team can choose from"
      type: string
      enum:
        - WIN
        - LOSS
        - TIE
    UpdateMatchActions:
      description: "The actions available on the 'updateMatch' endpoint"
      type: string
      enum:
        - JOIN
        - QUIT
        - POST_RESULT
    TeamRoles:
      description: "The possible roles for team members"
      type: string
      enum:
        - MEMBER
        - LEADER
    TeamInvites:
      description: "The possible invite statuses for team members"
      type: string
      enum:
        - PENDING
        - DECLINED
        - ACCEPTED
    TournamentTypes:
      description: "The possible types of a tournament"
      type: string
      enum:
        - TOURNAMENT
        - LADDER
    TeamStatuses:
      description: " Values that are added to a team object at runtime to tell the frontend if the team at it's current state can play in the tournament or not"
      type: string
      enum:
        - OK
        - NOT OK
    MongoID:
      type: string
      maxLength: 24
      minLength: 24
