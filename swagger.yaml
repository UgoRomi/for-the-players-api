openapi: 3.0.0
info:
  title: Just Fight API
  description: Just Fight API
  version: 0.0.1
servers:
  - url: 'https://just-fight.herokuapp.com/'
tags:
  - name: auth
    description: Endpoints about user auth
  - name: platform
    description: Endpoints about platforms
  - name: game
    description: Endpoints about games
  - name: team
    description: Endpoints about teams
  - name: user
    description: Endpoints about user and user profile
  - name: tournaments
    description: Endpoints about tournaments and ladders
  - name: rulesets
    description: Endpoints about rulesets for tournaments
paths:
  /auth/signup:
    post:
      summary: registration endpoint
      tags:
        - auth
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The new user's email
                  type: string
                  format: email
                password:
                  description: The new user's password
                  type: string
                username:
                  description: The new user's password
                  type: string
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '201':
          description: 'User successfully registered'
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: 'The username of the new User'
                  email:
                    type: string
                    description: 'The email of the new user'
                    format: email
                  status:
                    $ref: '#/components/schemas/UserStatuses'
  /auth/login:
    post:
      summary: login endpoint
      tags:
        - auth
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The new user's email
                  type: string
                  format: email
                password:
                  description: The new user's password
                  type: string
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '200':
          description: 'User successfully logged in'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: 'The JWT for the logged in user'
  /platform:
    post:
      summary: Create a new platform
      security:
        - BearerAuth: [ ]
      tags:
        - platform
      operationId: createPlatform
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new platform's name
                  type: string
                show:
                  description: If the platform should be showed to the end user
                  type: boolean
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '201':
          description: 'Platform successfully added'
    get:
      summary: Returns the list of all platforms that can be seen by the end user (The one that have visible=true)
      security:
        - BearerAuth: [ ]
      tags:
        - platform
      operationId: listAllVisiblePlatforms
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'List of platforms'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: 'The name of the platform'
                    games:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: 'The ID of the game'
  /platform/{platformId}:
    parameters:
      - name: platformId
        in: path
        required: true
        description: The MongoDB ID of the platform
        schema:
          $ref: '#/components/schemas/MongoID'
    get:
      tags:
        - platform
      security:
        - BearerAuth: [ ]
      summary: Returns the platforms that corresponds to the platform ID
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: 'Platform not found'
        '200':
          description: 'The platform'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformObject'
  /game:
    get:
      summary: Returns the list of all games
      security:
        - BearerAuth: [ ]
      tags:
        - game
      operationId: listAllGames
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'List of games'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: 'The name of the game'
                    id:
                      type: string
                      description: The Mongo ID of the game
                    imgUrl:
                      type: string
                      description: The image for the game
    post:
      summary: Create a new game
      security:
        - BearerAuth: [ ]
      tags:
        - game
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              required:
                - name
              type: object
              properties:
                name:
                  description: The new game's name
                  type: string
                imgUrl:
                  description: >
                    The imgurl link of the new game's image.
                    If this is present `imgBase64` will be ignored
                  type: string
                imgBase64:
                  description: >
                    The base64 of the new game's image.
                    If `imgUrl` is present this will be ignored
                  type: string
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '201':
          description: 'Game successfully added'
  /user/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: The MongoDB ID of the user
        schema:
          $ref: '#/components/schemas/MongoID'
    get:
      tags:
        - user
      security:
        - BearerAuth: [ ]
      summary: Returns the user that corresponds to the user ID
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: 'Platform not found'
        '200':
          description: 'The User'
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                    format: email
                    description: "The user's email"
                  username:
                    type: string
                    description: "The user's username"
                  createdAt:
                    type: string
                    format: date
                  platforms:
                    type: array
                    description: "The platforms to which the user has registered"
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: "The platform's name"
                        username:
                          type: string
                          description: "The user's username for this platform"
                  tournaments:
                    type: array
                    description: "The tournament of which the user is a part of"
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          description: "The team's name"
                        role:
                          $ref: "#/components/schemas/TeamRoles"
  /tournament:
    post:
      summary: Create a new tournament
      security:
        - BearerAuth: [ ]
      tags:
        - tournaments
      operationId: createTournament
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - game
                - platform
                - startsOn
                - endsOn
                - ruleset
                - type
                - show
              properties:
                name:
                  description: The new tournament's name
                  type: string
                game:
                  description: The Mongo ID of the game on which the tournament will be played on
                  type: string
                  minLength: 24
                  maxLength: 24
                platform:
                  description: The Mongo ID of the platform on which the tournament will be played on
                  type: string
                  minLength: 24
                  maxLength: 24
                show:
                  description: If the tournament should appear in the list of upcoming tournaments in the app
                  type: boolean
                startsOn:
                  description: The date and time on which the tournament will start
                  type: string
                  format: date-time
                endsOn:
                  description: The date and time on which the tournament will end
                  type: string
                  format: date-time
                ruleset:
                  description: The Mongo ID of the ruleset to use for this tournament
                  type: string
                  minLength: 24
                  maxLength: 24
                type:
                  $ref: '#/components/schemas/TournamentTypes'
                imgUrl:
                  description: >
                    The imgurl link of the new tournament's image.
                    If this is present `imgBase64` will be ignored
                  type: string
                imgBase64:
                  description: >
                    The base64 of the new tournament's image.
                    If `imgUrl` is present this will be ignored
                  type: string
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '201':
          description: 'Tournament added'
    get:
      summary: List all visible tournaments
      security:
        - BearerAuth: [ ]
      tags:
        - tournaments
      operationId: listVisibleTournaments
      parameters:
        - in: query
          name: gameId
          schema:
            $ref: '#/components/schemas/MongoID'
          description: Only show tournaments for a given game
        - in: query
          name: type
          schema:
            $ref: '#/components/schemas/TournamentTypes'
          description: Only show a type of tournament
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'List of all visible tournaments'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: 'The name of the tournament'
                    id:
                      type: string
                      description: The Mongo ID of the tournament
                    startsOn:
                      type: string
                      format: date-time
                      description: The time on which the tournament starts
                    endsOn:
                      type: string
                      format: date-time
                      description: The time on which the tournament ends
                    ruleset:
                      type: string
                      description: The ruleset used in this tournament
                    type:
                      $ref: '#/components/schemas/TournamentTypes'
                    numberOfTeams:
                      type: integer
                      description: How many teams are already signed up to this tournament
                    imgUrl:
                      type: string
                      description: The URL of the tournament's image
                    game:
                      type: string
                      description: The name of the game this tournament is on
  /tournament/:tournamentId/team:
    parameters:
      - name: tournamentId
        in: path
        required: true
        description: The MongoDB ID of the tournament
        schema:
          $ref: '#/components/schemas/MongoID'
    post:
      summary: Create a new team in the tournament
      security:
        - BearerAuth: [ ]
      tags:
        - tournaments
      operationId: createTeam
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '201':
          description: 'Team created'
  /ruleset:
    get:
      summary: Returns all rulesets
      security:
        - BearerAuth: [ ]
      tags:
        - rulesets
      operationId: listRulesets
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'The list of all rulesets'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: 'The name of the ruleset'
                    id:
                      type: string
                      description: The Mongo ID of the ruleset
                    game:
                      type: string
                      description: The Mongo ID of the game the ruleset is for
                    description:
                      type: string
                      description: The description of the ruleset
                    maxNumberOfPlayersPerTeam:
                      type: integer
                      description: The maximum number of players that can be in a team when using this ruleset
    post:
      summary: Create a new ruleset for a game
      security:
        - BearerAuth: [ ]
      tags:
        - rulesets
      operationId: createRuleset
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - game
                - maxNumberOfPlayersPerTeam
                - description
                - name
              properties:
                name:
                  description: The ruleset's name, must be unique
                  type: string
                maxNumberOfPlayersPerTeam:
                  description: The maximum number of players a team can have
                  type: integer
                description:
                  description: The ruleset's description
                  type: string
                game:
                  description: Mongo ID of the game
                  type: string
                  minLength: 24
                  maxLength: 24
      responses:
        '400':
          description: 'The input data was wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Forbidden'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '201':
          description: 'Ruleset added'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    SchemaValidationError:
      type: array
      items:
        type: object
        properties:
          value:
            type: string
            description: 'The value that was received by the server'
          msg:
            type: string
            description: 'Error message'
          param:
            type: string
            description: 'Name of the field that caused the error'
          location:
            type: string
            description: 'Where the field was that was received by the server'
    ErrorMessageResponse:
      type: object
      properties:
        errorMessage:
          type: string
    UserStatuses:
      description: "The possible statuses for a user"
      type: string
      enum:
        - NOT_VERIFIED
        - VERIFIED
        - BANNED
    TeamRoles:
      description: "The possible roles for team members"
      type: string
      enum:
        - INVITED
        - MEMBER
        - LEADER
    TournamentTypes:
      description: "The possible types of a tournament"
      type: string
      enum:
        - TOURNAMENT
        - LADDER
    MongoID:
      type: string
      maxLength: 24
      minLength: 24
    PlatformObject:
      type: object
      properties:
        name:
          description: The platform's name
          type: string
        show:
          description: If the platform should be showed to the end user
          type: boolean
        games:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                maxLength: 24
                minLength: 24
                description: The mongo ID of the game
              show:
                type: boolean
                description: If the user should see this game for the platform
