openapi: 3.0.0
info:
  title: Just Fight API
  description: Just Fight API
  version: 0.0.1
servers:
  - url: 'https://just-fight.herokuapp.com/'
tags:
  - name: auth
    description: Endpoints about user auth
  - name: platform
    description: Endpoints about platforms
  - name: game
    description: Endpoints about games
  - name: team
    description: Endpoints about teams
paths:
  /auth/signup:
    post:
      summary: registration endpoint
      tags:
        - auth
      operationId: signup
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The new user's email
                  type: string
                password:
                  description: The new user's password
                  type: string
                username:
                  description: The new user's password
                  type: string
      responses:
        '400':
          description: 'The input data was sent wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '200':
          description: 'User successfully registered'
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    description: 'The username of the new User'
                  email:
                    type: string
                    description: 'The email of the new user'
                  status:
                    $ref: '#/components/schemas/UserStatuses'
  /auth/login:
    post:
      summary: login endpoint
      tags:
        - auth
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  description: The new user's email
                  type: string
                password:
                  description: The new user's password
                  type: string
      responses:
        '400':
          description: 'The input data was sent wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '200':
          description: 'User successfully logged in'
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: 'The JWT for the logged in user'
  /platform:
    post:
      summary: Create a new platform
      security:
        - BearerAuth: [ ]
      tags:
        - platform
      operationId: createPlatform
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new platform's name
                  type: string
                show:
                  description: If the platform should be showed to the end user
                  type: boolean
      responses:
        '400':
          description: 'The input data was sent wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'Platform successfully added'
    get:
      summary: Returns the list of all platforms that can be seen by the end user (The one that have visible=true)
      security:
        - BearerAuth: [ ]
      tags:
        - platform
      operationId: listAllVisiblePlatforms
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'List of platforms'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: 'The name of the platform'
                    games:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: string
                            description: 'The ID of the game'
  /platform/{platformId}:
    parameters:
      - name: platformId
        in: path
        required: true
        description: The MongoDB ID of the platform
        schema:
          $ref: '#/components/schemas/MongoID'
    get:
      tags:
        - platform
      security:
        - BearerAuth: [ ]
      summary: Returns the platforms that corresponds to the platform ID
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '404':
          description: 'Platform not found'
        '200':
          description: 'The platform'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlatformObject'
  /game:
    get:
      summary: Returns the list of all games
      security:
        - BearerAuth: [ ]
      tags:
        - game
      operationId: listAllGames
      responses:
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'List of games'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                      description: 'The name of the game'
    post:
      summary: Create a new game
      security:
        - BearerAuth: [ ]
      tags:
        - game
      operationId: createGame
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  description: The new game's name
                  type: string
                maxNumberOfPlayersPerTeam:
                  description: The maximum number of players a team can have for this game
                  type: integer
      responses:
        '400':
          description: 'The input data was sent wrongly formatted'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchemaValidationError'
        '401':
          description: 'Missing bearer token'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '403':
          description: 'Unauthorized'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessageResponse'
        '200':
          description: 'Game successfully added'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    SchemaValidationError:
      type: array
      items:
        type: object
        properties:
          value:
            type: string
            description: 'The value that was received by the server'
          msg:
            type: string
            description: 'Error message'
          param:
            type: string
            description: 'Name of the field that caused the error'
          location:
            type: string
            description: 'Where the field was that was received by the server'
    ErrorMessageResponse:
      type: object
      properties:
        errorMessage:
          type: string
    UserStatuses:
      type: string
      enum:
        - NOT_VERIFIED
        - VERIFIED
        - BANNED
    MongoID:
      type: string
      maxLength: 24
      minLength: 24
    PlatformObject:
      type: object
      properties:
        name:
          description: The platform's name
          type: string
        show:
          description: If the platform should be showed to the end user
          type: boolean
        games:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                maxLength: 24
                minLength: 24
                description: The mongo ID of the game
              show:
                type: boolean
                description: If the user should see this game for the platform
